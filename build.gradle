plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'DBPS'
version = '1.0.0'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    modularity.inferModulePath = true // 모듈 시스템 유지
}

application {
    mainClass = 'dbps.dbps.Simulator'
    applicationDefaultJvmArgs = [
            "--add-modules", "javafx.controls,javafx.fxml",
            "--add-reads", "dbps.dbps=ALL-UNNAMED",
            "-Dprism.allowhidpi=true"
    ]
}

javafx {
    version = '17.0.6'
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

dependencies {
    implementation 'org.openjfx:javafx-controls:17.0.6'
    implementation 'org.openjfx:javafx-fxml:17.0.6'
    implementation 'org.fxmisc.richtext:richtextfx:0.11.3'
    implementation 'com.fazecast:jSerialComm:2.11.0'
    implementation 'org.slf4j:slf4j-api:2.0.16'
    implementation 'org.slf4j:slf4j-simple:2.0.16'
    implementation files('libs/mqttv3.jar')
    compileOnly 'org.projectlombok:lombok:1.18.34'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
}

shadowJar {
    archiveClassifier.set('') // Shadow JAR 이름 설정
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    configurations = [project.configurations.runtimeClasspath] // 모든 런타임 의존성 포함
    manifest {
        attributes(
                'Main-Class': 'dbps.dbps.Simulator' // 메인 클래스 지정
        )
    }
}

// UTF-8 설정
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Shadow JAR 빌드 후 실행하는 task 정의
tasks.register('runShadowJar', JavaExec) {
    dependsOn(shadowJar)
    mainClass.set(application.mainClass)
    classpath = files(shadowJar.get().archiveFile.get().asFile)
}
